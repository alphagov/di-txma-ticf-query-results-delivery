AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Allow TICF analysts to view the results of Athena queries on TxMA audit data

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    CodeSigningConfigArn: !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs16.x
    Timeout: 15
  Api:
    OpenApiVersion: 3.0.1

Resources:

  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  # this does not need to be a complicated table as it's only storing:
  # FraudId (Primary Key): a hash
  # DownloadsRemaining: a number initialised on creation
  # S3FraudDataFile: The S3 object that the user needs to gain access too
  SecureFraudSiteData:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: downloadHash
        Type: String
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DatabaseKmsKey.Arn
  
  DatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'

  DatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/secure-fraud-site-database-kms-key
      TargetKeyId: !Ref DatabaseKmsKey

  SecureFraudSiteApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt SecureFraudSiteAccessLogGroup.Arn
        Format: $context.requestId
      Name: !Sub ${AWS::StackName}-secure-fraud-site-api
      StageName: default
      TracingEnabled: true

  SecureFraudSiteAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: !Sub /aws/apigateway/${SecureFraudSiteApi}-access-logs
      RetentionInDays: 7

  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  LogsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/sandbox/secure-fraud-site-logs-kms-key
      TargetKeyId: !Ref LogsKmsKey

  ConfirmDownloadFunction:
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function 
    Properties:
      Handler: confirmDownload.handler
      Policies:
        - Statement:
          - Sid: DynamoDBReadWrite
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource:
              - !GetAtt SecureFraudSiteData.Arn
          - Sid: KmsDatabaseDecryptionKey
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt DatabaseKmsKey.Arn
      Environment:
        Variables:
          SECURE_DOWNLOAD_TABLE_NAME: !Ref SecureFraudSiteData
      FunctionName: !Sub ${AWS::StackName}-confirm-download-page
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Events:
        ConfirmDownload:
          Type: Api 
          Properties:
            RestApiId: !Ref SecureFraudSiteApi
            Method: post
            Path: /secure/{downloadHash}
      ReservedConcurrentExecutions: 10
  
  ConfirmDownloadFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref ConfirmDownloadFunction]]
      RetentionInDays: 30

  DownloadWarningFunction:
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function 
    Properties:
      Handler: downloadWarning.handler
      Policies:
        - Statement:
          - Sid: DynamoDBRead
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !GetAtt SecureFraudSiteData.Arn
          - Sid: KmsDatabaseDecryptionKey
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt DatabaseKmsKey.Arn
      FunctionName: !Sub ${AWS::StackName}-download-warning-page
      Environment:
        Variables:
          SECURE_DOWNLOAD_TABLE_NAME: !Ref SecureFraudSiteData
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Events:
        DownloadWarning:
          Type: Api 
          Properties:
            RestApiId: !Ref SecureFraudSiteApi
            Method: get
            Path: /secure/{downloadHash}
      ReservedConcurrentExecutions: 10

  DownloadWarningFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogsKmsKey.Arn
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref DownloadWarningFunction]]
      RetentionInDays: 30
