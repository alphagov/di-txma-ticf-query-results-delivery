AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Allow TICF analysts to view the results of Athena queries on TxMA audit data

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn: !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    ReservedConcurrentExecutions: 10
    Runtime: nodejs16.x
    Timeout: 15
  Api:
    OpenApiVersion: 3.0.1

Resources:
  SecureFraudSiteApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt SecureFraudSiteAccessLogGroup.Arn
        Format: $context.requestId
      Name: !Sub ${AWS::StackName}-secure-fraud-site-api
      StageName: default
      TracingEnabled: true
      GatewayResponses:
        ACCESS_DENIED:
           ResponseTemplates: 
              application/json: '{"message": "Access Denied: if you think you should have access to this URL, make sure you are connected to the VPN"}'
      Auth:
        ResourcePolicy:
          IpRangeWhitelist:
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_1}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_2}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_3}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_4}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_5}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_6}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_7}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_8}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_9}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_10}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_11}}'
             - '{{resolve:ssm:SECURE_DOWNLOAD_WEBSITE_ALLOWED_IP_12}}'

  SecureFraudSiteAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/${SecureFraudSiteApi}-access-logs
      RetentionInDays: 30

  SecureFraudApiWafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${SecureFraudSiteApi}/stages/${SecureFraudSiteApi.Stage}
      WebACLArn: '{{resolve:ssm:SecureFraudApiWafAclArn}}'

  ConfirmDownloadFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: confirmDownload.handler
      Environment:
        Variables:
          SECURE_DOWNLOAD_TABLE_NAME: '{{resolve:ssm:SecureFraudSiteDataTableName}}'
          LINK_EXPIRY_TIME: '{{resolve:ssm:LINK_EXPIRY_TIME}}'
      FunctionName: !Sub ${AWS::StackName}-confirm-download-page
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Events:
        ConfirmDownload:
          Type: Api
          Properties:
            RestApiId: !Ref SecureFraudSiteApi
            Method: post
            Path: /secure/{downloadHash}
      Policies:
        - Statement:
          - Sid: SecureFraudSiteDataTableReadWrite
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: '{{resolve:ssm:SecureFraudSiteDataTableArn}}'
          - Sid: DecryptKmsKeys
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '{{resolve:ssm:DatabaseKmsKeyArn}}'
          - Sid: S3ResultsBucketRead
            Effect: Allow
            Action:
              - s3:GetObject
            Resource: '{{resolve:ssm:QueryResultsBucketArn}}/*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt ConfirmDownloadFunctionLogs.Arn

  ConfirmDownloadFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-confirm-download-page'
      RetentionInDays: 30

  DownloadWarningFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: downloadWarning.handler
      Environment:
        Variables:
          SECURE_DOWNLOAD_TABLE_NAME: '{{resolve:ssm:SecureFraudSiteDataTableName}}'
          LINK_EXPIRY_TIME: '{{resolve:ssm:LINK_EXPIRY_TIME}}'
      Events:
        DownloadWarning:
          Type: Api
          Properties:
            RestApiId: !Ref SecureFraudSiteApi
            Method: get
            Path: /secure/{downloadHash}
      FunctionName: !Sub ${AWS::StackName}-download-warning-page
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
          - Sid: SecureFraudSiteDataTableRead
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: '{{resolve:ssm:SecureFraudSiteDataTableArn}}'
          - Sid: DecryptDatabaseKmsKey
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '{{resolve:ssm:DatabaseKmsKeyArn}}'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt DownloadWarningFunctionLogs.Arn

  DownloadWarningFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-download-warning-page'
      RetentionInDays: 30

  SendEmailRequestToNotifyFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Unsure of what will call the function currently - need revision at a later point
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendEmailRequestToNotify.handler
      Environment:
        Variables:
          NOTIFY_API_SECRETS_ARN: '{{resolve:ssm:NotifySecretSetArn}}'
      FunctionName: !Sub ${AWS::StackName}-send-email-request-to-notify
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Events:
        SendEmailEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SendEmailQueue.Arn
            BatchSize: 1
      Policies:
        - Statement:
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt SendEmailRequestToNotifyLogs.Arn
          - Sid: ReadSecrets
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - '{{resolve:ssm:NotifySecretSetArn}}'
          - Sid: DecryptKmsKeys
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '{{resolve:ssm:SecretsKmsKeyArn}}'
              - '{{resolve:ssm:SqsKmsKeyArn}}'

  SendEmailRequestToNotifyLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-send-email-request-to-notify'
      RetentionInDays: 30

  SendEmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SendEmailDeadLetterQueue.Arn
        maxReceiveCount: 5

  SendEmailDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'

  GenerateDownloadFunction:
      #checkov:skip=CKV_AWS_117:VPC not required
      #checkov:skip=CKV_AWS_115:Defined in Globals section
      #checkov:skip=CKV_AWS_116:Queue we read from has DLQ set up
      Type: AWS::Serverless::Function
      Properties:
        Handler: generateDownload.handler
        Environment:
          Variables:
            SECURE_DOWNLOAD_TABLE_NAME: '{{resolve:ssm:SecureFraudSiteDataTableName}}'
            QUERY_RESULTS_BUCKET_NAME: '{{resolve:ssm:QueryResultsBucketName}}'
            ATHENA_OUTPUT_BUCKET_NAME: !Sub txma-data-analysis-${Environment}-athena-query-output-bucket
            SEND_TO_EMAIL_QUEUE_URL: !Ref SendEmailQueue 
            SECURE_DOWNLOAD_LINK_BASE_URL: !Sub https://${SecureFraudSiteApi}.execute-api.eu-west-2.amazonaws.com/default/secure
        Events:
          QueryCompleteEvent:
            Type: SQS
            Properties:
              Queue: !Sub 'arn:aws:sqs:${AWS::Region}:{{resolve:ssm:AuditAccountNumber}}:txma-data-analysis-${Environment}-query-completed-queue'
              BatchSize: 1
        FunctionName: !Sub ${AWS::StackName}-generate-download
        KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
        Policies:
          - Statement:
            - Sid: SecureFraudSiteDataTableWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: '{{resolve:ssm:SecureFraudSiteDataTableArn}}'
            - Sid: DecryptDatabaseKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: '{{resolve:ssm:DatabaseKmsKeyArn}}'
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt DownloadWarningFunctionLogs.Arn
            - Sid: AllowQueueRead
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !Sub 'arn:aws:sqs:${AWS::Region}:{{resolve:ssm:AuditAccountNumber}}:txma-data-analysis-${Environment}-query-completed-queue'
            - Sid: UseQueryCompletedQueueKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource: !Sub 'arn:aws:kms:${AWS::Region}:{{resolve:ssm:AuditAccountNumber}}:*'
            - Sid: AllowAccessAthenaOutputBucket
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: 'arn:aws:s3:::txma-data-analysis-dev-athena-query-output-bucket/*'
            - Sid: AllowDecryptOfAthenaOutput
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !Sub 'arn:aws:kms:${AWS::Region}:{{resolve:ssm:AuditAccountNumber}}:*'
            - Sid: S3ResultsBucketWrite
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: '{{resolve:ssm:QueryResultsBucketArn}}/*'
            - Sid: AllowSqsSend
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt SendEmailQueue.Arn
            - Sid: UseSqsKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource: '{{resolve:ssm:SqsKmsKeyArn}}'
  GenerateDownloadFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-generate-download'
      RetentionInDays: 30
