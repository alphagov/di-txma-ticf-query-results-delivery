AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  fraud-secure-site

  Simple solution for storing data for fraud related enquiries
Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    CodeSigningConfigArn: !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs16.x
    Timeout: 15
  Api:
    OpenApiVersion: 3.0.1

Resources:

  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  # this does not need to be a complicated table as it's only storing:
  # FraudId (Primary Key): a hash
  # DownloadsRemaining: a number initialised on creation
  # S3FraudDataFile: The S3 object that the user needs to gain access too
  SecureFraudSiteData:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey: FraudId

  SecureFraudSiteApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: test

  ConfirmDownloadFunction:
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function 
    Properties:
      Handler: confirmDownload.handler
      Policies:
        - DynamoDbReadPolicy:
          TableName: !Ref SecureFraudSiteData
      Environment:
        Variables:
          FRAUDTABLE: !Ref SecureFraudSiteData
            KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Events:
        ConfirmDownload:
          Type: HttpApi 
          Properties:
            ApiId: SecureFraudSiteApi
            Method: get
            Path: /secure/{downloadHash}
      ReservedConcurrentExecutions: 10
  
  DownloadWarningFunction:
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function 
    Properties:
      Handler: downloadWarning.handler
      Policies:
        - DynamoDbReadPolicy:
          TableName: !Ref SecureFraudSiteData
        - DynamoDbWritePolicy:
          TableName: !Ref SecureFraudSiteData
      Environment:
        Variables:
          FRAUD_TABLE: !Ref SecureFraudSiteData
      KmsKeyArn: !GetAtt LambdaKmsKey.Arn
      Events:
        DownloadWarning:
          Type: HttpApi 
          Properties:
            ApiId: SecureFraudSiteApi
            Method: post
            Path: /secure/{downloadHash}
      ReservedConcurrentExecutions: 10

    
